import subprocess

from named_pipe import Command_Output_To_Named_Pipe

# class Video_Stream_Chain:
#     def __init__(self, video_stream_chain):
#         self.video_stream_chain = video_stream_chain
#         self.std_out_chain = None
#         self.input_chain = None
# def cmd_tee_passthrough_test():
#     cmd1 = ['echo', 'hello']
#     cmd2 = ['tee', 'test.txt']
#     print(f"Shell style : {' '.join(cmd1)} | {' '.join(cmd2)}")

#     p1 = subprocess.Popen(
#         cmd1, stdout=subprocess.PIPE)  # stderr=PIPE optional, dd is chatty
#     p2 = subprocess.Popen(cmd2, stdin=p1.stdout, stdout=None)

#     # thoretically p1 and p2 may still be running, this ensures we are collecting their return codes
#     p1.wait()
#     p2.wait()
#     print("p1 return: ", p1.returncode)
#     print("p2 return: ", p2.returncode)


class Media_Stream_Controller:
    def __init__(self, config):
        self.open_video_stream_map = {}
        self.config = config

        # https://stackoverflow.com/questions/295459/how-do-i-use-subprocess-popen-to-connect-multiple-processes-by-pipes

    async def start_video_command_pipe(self, cmd_str=None):
        if cmd_str not in self.open_video_stream_map:
            cmd = await Command_Output_To_Named_Pipe(
                pipe_file_path=self.config.NamedPipeFolder + 'vid.pipe',
                command_string=cmd_str,
                create_pipe=True)
            self.open_video_stream_map[cmd_str] = cmd
            cmd.start_cmd()
            return cmd
        elif cmd_str != None:
            return self.open_video_stream_map[cmd_str]

    async def stop_video_command_pipe(self):
        ## AUTOGENERATED< NEEDS TO BE FIXED >AUTOGENERATED##
        cmd_str = 'ffmpeg -f avfoundation -pix_fmt nv12 -video_size 640x480 -use_wallclock_as_timestamps 1 -framerate 30 -i default -f h264 pipe:1',
        if cmd_str in self.open_video_stream_map:
            cmd = self.open_video_stream_map[cmd_str]
            cmd.stop_cmd()
            del self.open_video_stream_map[cmd_str]

    async def get_video_pipe(self):
        cmd_str = 'ffmpeg -f avfoundation -pix_fmt nv12 -video_size 640x480 -use_wallclock_as_timestamps 1 -framerate 30 -i default -f h264 pipe:1',
        cmd = await self.start_video_command_pipe(cmd_str)
        return cmd, "vid.pipe"


# ["ffmpeg", "-f", "avfoundation", "-pix_fmt", "nv12", "-video_size", "640x480", "-use_wallclock_as_timestamps", "1", "-framerate", "30", "-i", "default", "-f", "h264", "pipe:1"]
