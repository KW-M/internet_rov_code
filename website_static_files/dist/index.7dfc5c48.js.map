{"mappings":"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","sources":["src/js/connection.js"],"sourcesContent":["// -------------------------------------------------------------\n// ------ Real Time Connection / Socket / webRTC stuff ---------\n// ------------------------------------------------------------\n\nvar signalObj = null;\nvar isStreaming = false;\nvar videoElem = document.getElementById('video-livestream');\n\nfunction getDefaultSignallingServerURL() {\n    // Let's get a default address for the signalling server\n    var signalling_server_hostname = location.hostname || \"192.168.0.88\";\n    var signalling_server_address = signalling_server_hostname;// ':' + (location.port || (location.protocol === 'https:' ? 443 : 80)\n    var protocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    address = protocol + '//' + signalling_server_address + '/stream/webrtc';\n    return address;\n}\n\nfunction setupVideoDisplay(stream) {\n    // Wait until the video stream can play to say we're streaming\n    videoElem.addEventListener('canplay', function canPlayHandler(e) {\n        videoElem.play();\n        if (!isStreaming) {\n            isStreaming = true;\n        }\n        // videoElem.removeEventListener('canplay', canPlayHandler);\n    }, false);\n\n    // set the video element to show the webrtc stream.\n    videoElem.srcObject = stream;\n}\n\nvar dataChannel;\nfunction connectToROV(signallingWebsocketURL, dataChannelMessageRecievedCallback, rovConnectedCallback) {\n    if (!isStreaming) {\n        console.log(\"Attempting connection using websocket url:\", signallingWebsocketURL)\n        signalObj = new signal(signallingWebsocketURL,\n            function (stream) {\n                showToastMessage(\"Got a Video Stream!\");\n                console.log('Got a video stream!', stream);\n                setupVideoDisplay(stream);\n            },\n            function (error) {\n                // this function runs when there is an error with the socket (or webrtc?) connection\n                console.error(\"Socket (or webrtc?) connection error:\", error)\n                alert(\"Socket (or webrtc?) connection error! See js console for details.\");\n            },\n            function () {\n                // this function runs when the websocket closes\n                videoElem.srcObject = null;\n                isStreaming = false;\n                showROVDisconnectedUI();\n                showToastMessage(\"Signalling Websocket Closed! Click me to try a different server address.\", () => {\n                    webSocketUrl = window.prompt(\"Click Ok to reconnect. If you know the signalling server websocket url, enter it here (normally wss://<host>:<port>/stream/webrtc where <host> is the url or ip and port is the port\", signallingWebsocketURL);\n                    connectToROV(webSocketUrl, dataChannelMessageRecievedCallback, rovConnectedCallback);\n                });\n            },\n            function (message) {\n                alert(\"Got Websocket Message: \" + message);\n            },\n            function (dataChannelEvent) {\n                dataChannel = dataChannelEvent.channel;\n                dataChannel.onopen = function () {\n                    showToastMessage(\"Data Channel is open!\");\n                    rovConnectedCallback();\n                };\n\n                dataChannel.onerror = function (error) {\n                    console.error(\"Data Channel Error:\", error);\n                    signalObj.hangup();\n                    showROVDisconnectedUI();\n                    showToastMessage(\"Data Channel Error:\" + error);\n                };\n\n                dataChannel.onmessage = function (event) {\n                    console.log(\"Got Data Channel Message:\", event.data);\n                    dataChannelMessageRecievedCallback(event.data);\n                };\n\n                dataChannel.onclose = function () {\n                    dataChannel = null;\n                    signalObj.hangup();\n                    showROVDisconnectedUI();\n                    showToastMessage(\"Data Channel is Closed\");\n                };\n            }\n\n        );\n\n        // when the user closes their browser window, we need tell the pi to end the webrtc & socket connections\n        // so \"before\" the window/tab/browser is \"unloaded\" (closed), hang up.\n        window.onbeforeunload = () => signalObj.hangup();\n    }\n}\n\nfunction sendUpdateToROV(updateData) {\n    if (dataChannel) {\n        dataChannel.send(JSON.stringify(updateData));\n    }\n}"],"names":[],"version":3,"file":"index.7dfc5c48.js.map","sourceRoot":"/__parcel_source_root/"}