{"mappings":"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","sources":["src/js/gamepad-emulation.js"],"sourcesContent":["const gamepadEmulator = {\n\n    // The list of emulated gamepads, corresponds 1-1 to the list output by navigator.getGamepads().\n    // when an emulated gamepad is \"connected\" ie: call addEmulatedGamepad(), it is added to this list.\n    // when an emulated gamepad is \"disconnected\" ie: call removeEmulatedGamepad(), it is removed from this list.\n    // if a real gamepad is found at the same array index as an emulated gamepad, the navigator.getGamepads() list\n    // will report buttons pressed or axies moved on both the real gamepad and the emulated one.\n    emulatedGamepads: [],\n\n    // A number of typical buttons recognized by Gamepad API and mapped to\n    // standard controls. Any extraneous buttons will have larger indexes.\n    DEFAULT_BUTTON_COUNT: 18,\n\n    // A number of typical axes recognized by Gamepad API and mapped to\n    // standard controls. Any extraneous buttons will have larger indexes.\n    DEFAULT_AXIS_COUNT: 4,\n\n    /* creates a new emmulated gamepad at the given index as would be read in navigator.getGamepads\n     * @param {number} gpadIndex - the index of the gamepad to create\n     * @param {number} buttonCount - normally 18, the number of buttons on the gamepad\n     * @param {number} axisCount - normally 4, the number of axes on the gamepad\n    */\n    addEmulatedGamepad: function (gpadIndex, buttonCount, axisCount) {\n        var gpad = {\n            connected: true,\n            timestamp: Math.floor(Date.now() / 1000),\n            buttons: [],\n            axes: [],\n            id: \"Emulated Gamepad \" + gpadIndex,\n        };\n        for (var i = 0; i < buttonCount; i++) {\n            gpad.buttons.push({ pressed: false, value: 0, touched: false });\n        }\n        for (var i = 0; i < axisCount; i++) {\n            gpad.axes.push(0);\n        }\n        this.emulatedGamepads.push(gpad);\n\n        // trigger the (system) gamepad connected event on the window object\n        const event = new Event(\"gamepadconnected\");\n        event.gamepad = gpad;\n        window.dispatchEvent(event);\n    },\n\n    /* removes the emmulated gamepad at the passed index as would be read from the list in navigator.getGamepads\n     * @param {number} gpadIndex - the index of the gamepad to remove\n    */\n    disconnectEmulatedGamepad: function (gpadIndex) {\n        var gpad = this.emulatedGamepads[gpadIndex];\n        if (gpad) {\n            this.emulatedGamepads.splice(gpadIndex, 1);\n            if (!window.getGamepads()[gpadIndex]) {\n                const event = new Event(\"gamepaddisconnected\");\n                gpad.connected = false;\n                gpad.timestamp = Math.floor(Date.now() / 1000);\n                event.gamepad = gpad;\n                window.dispatchEvent(event);\n            }\n        }\n    },\n\n\n    /* emulates pressing a button on the gamepad at the given index\n\n    */\n    pressButton: function (gpadIndex, buttonIndex, value, touched) {\n        var gpad = this.emulatedGamepads[gpadIndex];\n        if (!gpad) gpad = this.addEmulatedGamepad(gpadIndex, this.DEFAULT_BUTTON_COUNT, this.DEFAULT_AXIS_COUNT);\n\n        var isPressed = value > 0.1;\n\n        this.emulatedGamepads[gpadIndex].buttons[buttonIndex] = {\n            pressed: isPressed,\n            value: value || 0,\n            touched: isPressed || touched || false\n        };\n    },\n\n    moveAxis: function (gpadIndex, axisIndex, value) {\n        var gpad = this.emulatedGamepads[gpadIndex];\n        if (!gpad) gpad = this.addEmulatedGamepad(gpadIndex, this.DEFAULT_BUTTON_COUNT, this.DEFAULT_AXIS_COUNT);\n        this.emulatedGamepads[gpadIndex].axes[axisIndex] = value;\n    },\n\n    /* add event listeners to the html button elements of an onscreen gamepad to emulate gamepad input\n        * @param {number} gpadIndex - the index of the gamepad to register events for\n        * @param {array} buttonTapZoneElements - an array of elements that are the tap targets for the buttons on the onscreen gamepad, in same order as the gamepad api would use.\n        * @param {array} buttonHighlightElements - an array of elements that should have the classes applied for the buttons on the onscreen gamepad, in same order as the gamepad api would use.\n        * @param {string} btnTouchedClass - the class to apply to the buttonHighlightElement when it is hovered over\n        * @param {string} btnPressedClass - the class to apply to the buttonHighlightElement when it is pressed / clicked\n    */\n    registerOnScreenGamepadButtonEvents: function (gpadIndex, buttonTapZoneElements) {\n        // for (var btnIndx = 0; btnIndx < buttonTapZoneElements.length; btnIndx++) {\n        var self = this;\n        buttonTapZoneElements.forEach(function (btnEl, btnIndx) {\n            var btnEl = buttonTapZoneElements[btnIndx];\n            btnEl.addEventListener(\"pointerover\", (e) => {\n                // tell the emulator this button is being \"touched\", ie: hovered over\n                self.pressButton(gpadIndex, btnIndx, 0, true);\n            });\n            btnEl.addEventListener(\"pointerleave\", (e) => {\n                // tell the emulator this button is no longer being \"touched\", ie: not hovered over\n                self.pressButton(gpadIndex, btnIndx, 0, false);\n            });\n            btnEl.addEventListener(\"pointerdown\", (e) => {\n                // tell the emulator this button is being pressed, ie: clicked / tapped\n                self.pressButton(gpadIndex, btnIndx, 1, true);\n            });\n            btnEl.addEventListener(\"pointerup\", (e) => {\n                // tell the emulator this button is no longer being pressed\n                self.pressButton(gpadIndex, btnIndx, 0, true);\n            });\n        });\n    },\n\n\n    registerOnScreenGamepadAxisEvents: function (gpadIndex, joysticksTouchDetails) {\n        var axisTouchRadius = 100;\n        var self = this\n        var pointerToJoystickMapping = {};\n        const pointerMoveHandler = function (me) {\n            for (const key in pointerToJoystickMapping) {\n                if (key == me.pointerId) {\n                    const joystickData = pointerToJoystickMapping[key];\n                    var deltaX = Math.max(Math.min((me.clientX - joystickData.startX) / axisTouchRadius, 1), -1)\n                    var deltaY = Math.max(Math.min((me.clientY - joystickData.startY) / axisTouchRadius, 1), -1)\n                    self.moveAxis(gpadIndex, joystickData.xAxisGpadAxis, deltaX);\n                    self.moveAxis(gpadIndex, joystickData.yAxisGpadAxis, deltaY);\n                }\n            }\n        }\n        const pointerUpHandler = function (me) {\n            for (const key in pointerToJoystickMapping) {\n                if (key == me.pointerId) {\n                    const joystickData = pointerToJoystickMapping[key];\n                    self.moveAxis(gpadIndex, joystickData.xAxisGpadAxis, 0);\n                    self.moveAxis(gpadIndex, joystickData.yAxisGpadAxis, 0);\n                    delete pointerToJoystickMapping[key];\n                }\n            }\n            if (Object.keys(pointerToJoystickMapping).length == 0) {\n                // axisHighlightElements[index].classList.remove(axisMovedClass);\n                document.removeEventListener(\"pointermove\", pointerMoveHandler, false);\n                document.removeEventListener(\"pointerup\", pointerUpHandler, false);\n            }\n        }\n        document.addEventListener(\"pointerdown\", function (de) {\n            joysticksTouchDetails.forEach(function (joystickTouchDetails) {\n                if (de.target === joystickTouchDetails.elem) {\n                    // axisTouchStartZone.elem.addEventListener(\"pointerover\", function (e) {\n                    //     axisHighlightElements[index].classList.add(axisHoveredClass);\n                    // });\n                    // axisTouchStartZone.elem.addEventListener(\"pointerleave\", function (e) {\n                    //     axisHighlightElements[index].classList.remove(axisHoveredClass);\n                    // });\n                    joystickTouchDetails.startX = de.clientX;\n                    joystickTouchDetails.startY = de.clientY;\n                    pointerToJoystickMapping[de.pointerId] = joystickTouchDetails;\n                };\n            });\n            if (Object.keys(pointerToJoystickMapping).length == 1) {\n                document.addEventListener(\"pointermove\", pointerMoveHandler, false);\n                document.addEventListener(\"pointerup\", pointerUpHandler, false);\n            }\n        })\n    },\n\n    monkeyPatchGetGamepads: function () {\n        var getNativeGamepads = navigator.getGamepads\n        if (getNativeGamepads) getNativeGamepads = getNativeGamepads.bind(navigator);\n        var self = this;\n        navigator.getGamepads = function () {\n            var nativeGamepads = getNativeGamepads != undefined ? getNativeGamepads() : [];\n            nativeGamepads = Array.from(nativeGamepads)\n            // console.log(\"nativeGamepads:\", nativeGamepads)\n            for (var i = 0; i < self.emulatedGamepads.length; i++) {\n                var n_gpad = nativeGamepads[i];\n                var e_gpad = self.emulatedGamepads[i];\n                if (e_gpad && n_gpad) {\n                    // if both an emulated gamepad and a real one is available for this index,\n                    n_gpad.emulated = false; // should have some kind of mixed indication value here\n                    for (let btnIdx = 0; btnIdx < e_gpad.buttons.length; btnIdx++) {\n                        const e_btn = e_gpad.buttons[btnIdx];\n                        const n_btn = n_gpad.buttons[btnIdx];\n                        if (!e_btn || !n_gpad.buttons[btnIdx]) continue;\n                        // nativeGamepads[i].buttons[btnIdx].touched = e_btn.touched || n_btn.touched || false;\n                        // nativeGamepads[i].buttons[btnIdx].pressed = e_btn.pressed || n_btn.pressed || false;\n                        // nativeGamepads[i].buttons[btnIdx].value = Math.max(e_btn.value, n_btn.value) || 0;\n                        nativeGamepads[i].buttons[btnIdx] = {\n                            touched: e_btn.touched || n_btn.touched || false,\n                            pressed: e_btn.pressed || n_btn.pressed || false,\n                            value: Math.max(e_btn.value, n_btn.value) || 0,\n                        }\n\n                    }\n                    for (let axisIndex = 0; axisIndex < e_gpad.axes.length; axisIndex++) {\n                        const e_axis = e_gpad.axes[axisIndex];\n                        const n_axis = n_gpad.axes[axisIndex];\n                        nativeGamepads[i].axes[axisIndex] = Math.max(e_axis, n_axis) || 0;\n                    }\n\n                    // console.log(\"mixedGamepad:\", nativeGamepads[i])\n                } else if (e_gpad) {\n                    // if only the emulated gamepad is available, use it\n                    e_gpad.emulated = true;\n                    e_gpad.timestamp = Math.floor(Date.now() / 1000);\n                    nativeGamepads[i] = e_gpad;\n                    // console.log(\"eGamepad:\", nativeGamepads[i])\n                }\n            }\n            return nativeGamepads;\n        }\n    },\n};\n"],"names":[],"version":3,"file":"index.cf7b04d3.js.map","sourceRoot":"/__parcel_source_root/"}