{"mappings":"","sources":["src/js/main.js"],"sourcesContent":["// // import {} from \"./libraries/joypad.min.js\"\n// //import {} from \"./libraries/gamepad-lib.js\"\n\n// import {} from \"./libraries/webrtc-signaling.js\";\n// import {} from \"./libraries/toastify-js.js\";\n// import {} from \"./libraries/joymap.min.js\";\n\n// import {} from \"./js/util.js\";\n// import {} from \"./js/ui.js\";\n// import {} from \"./js/api.js\";\n// import {} from \"./js/connection.js\";\n// import {} from \"./js/gamepad-emulation.js\";\n// import {} from \"./js/gamepad-ui.js\";\n// import {} from \"./js/gamepad.js\";\n\n\n\n// var lastTimeRecvdPong = 0;\n// const handleROVMessage = function (message) {\n//     msgData = JSON.parse(message);\n//     if (msgData['pong']) {\n//         console.log(\"Ping->Pong received\");\n//         lastTimeRecvdPong = Date.now();\n//         networkPingDelay = lastTimeRecvdPong - Number.parseFloat(msgData['pong']) // since the rpi replies with the ms time we sent in the ping in the pong message\n//         updatePingDisplay(networkPingDelay);\n//         if (msgData[\"sensor_update\"]) updateDisplayedSensorValues(msgData[\"sensor_update\"]);\n//     }\n// }\n\n// setupConnectDisconnectButtonEvents(() => {\n//     // connect button clicked:\n//     connectToROV(getDefaultSignallingServerURL(), handleROVMessage, () => {\n//         console.log(\"Connected to ROV\");\n//         // start ping timer to send ping every second\n//         pingTimer = setInterval(() => {\n//             sendUpdateToROV({ 'ping': Date.now() });\n//         }, 2000);\n\n//     });\n// }, () => {\n//     // disconnect button clicked:\n//     if (signalObj) {\n//         signalObj.hangup();\n//     }\n//     signalObj = null;\n//     videoElem.srcObject = null;\n//     isStreaming = false;\n// })\n\n// // -----------------------------------------------------\n// // ------------ Gamepad Related ------------------------\n// // -----------------------------------------------------\n\n// var handleButtonPressBrowserSide = function (buttonFunction, buttonValue) {\n//     if (buttonFunction == \"photo\") {\n//         takePhoto();\n//         return true;\n//     } else if (buttonFunction == \"video\") {\n//         // toggleVideo();\n//         return true;\n//     }\n//     return false\n// }\n\n// var buttonMappingNames = {\n//     'A': { func: 'photo', desc: 'Take Photo' },\n//     'B': { func: 'record', desc: 'Start/Stop Recording' },\n//     'X': { func: 'None', desc: 'TBD' },\n//     'Y': { func: 'None', desc: 'TBD' },\n//     'L1': { func: 'clawOpen', mode: \"btn_hold_allowed\", desc: 'Open Claw' },\n//     'R1': { func: 'clawOpen', mode: \"btn_hold_allowed\", desc: 'Open Claw' },\n//     'L2': { func: 'clawClose', mode: \"btn_hold_allowed\", desc: 'Close Claw' },\n//     'R2': { func: 'clawClose', mode: \"btn_hold_allowed\", desc: 'Close Claw' },\n//     'SELECT': { func: 'bitrate-', mode: \"btn_hold_allowed\", desc: 'TODO: Decrease Video Quality (lowers latency)' },\n//     'START': { func: 'bitrate+', mode: \"btn_hold_allowed\", desc: 'TODO: Increase Video Quality (adds latency)' },\n//     'dpadUp': { func: 'lights+', mode: \"btn_hold_allowed\", desc: 'TODO: Increase Intensity of Lights' },\n//     'dpadDown': { func: 'lights-', mode: \"btn_hold_allowed\", desc: 'TODO: Decrease Intensity of Lights' },\n//     'dpadLeft': { func: 'exposure-', mode: \"btn_hold_allowed\", desc: 'TODO: Dim Camera Exposure' },\n//     'dpadRight': { func: 'exposure+', mode: \"btn_hold_allowed\", desc: 'TODO: Brighten Camera Exposure' },\n// }\n// var lastROVMotionMessage = {};\n// initGamepadSupport(gamepadUi, gamepadEmulator, handleGamepadInput);\n// function handleGamepadInput(buttonStates, axisState) {\n//     var messageToRov = {}\n//     for (const btnName in buttonMappingNames) {\n//         const btnState = buttonStates[btnName]\n//         if (btnState == undefined) continue;\n//         const btnFunctionName = buttonMappingNames[btnName].func;\n//         const btnFunctionMode = buttonMappingNames[btnName].mode;\n//         if (btnState.pressed && (btnState.justChanged || btnFunctionMode == \"btn_hold_allowed\")) {\n//             // if this button action is performed in the browser (not on the rov), this function will take care of it, and return true:\n//             if (handleButtonPressBrowserSide(btnFunctionName, btnState.value)) continue;\n//             // otherwise, send the function name of the button to the ROV with the current button value\n//             messageToRov[btnFunctionName] = btnState.value;\n//         }\n//         if (gamepadHelpVisible && btnState.justChanged && btnState.pressed) {\n//             gamepadHelpText.innerText = buttonMappingNames[btnName].desc\n//         }\n//     }\n\n//     var rawAxies = [];\n\n//     if (axisState[\"L\"] && axisState[\"R\"]) { // && (axisState[\"R\"].justChanged || axisState[\"L\"].justChanged)\n//         rawAxies = rawAxies.concat(axisState[\"L\"].value);\n//         rawAxies = rawAxies.concat(axisState[\"R\"].value);\n//         var desiredRovMotion = calculateDesiredMotion(rawAxies);\n//         if (JSON.stringify(desiredRovMotion) != lastROVMotionMessage) {\n//             lastROVMotionMessage = JSON.stringify(desiredRovMotion);\n//             messageToRov['move'] = desiredRovMotion;\n//         }\n//     }\n\n//     if (Object.keys(messageToRov).length > 0) {\n//         console.log(\"Sending message to ROV: \" + JSON.stringify(messageToRov));\n//         sendUpdateToROV(messageToRov);\n//     }\n// }\n\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}